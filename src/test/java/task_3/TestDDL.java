package task_3;

import com.google.gson.Gson;
import com.google.gson.stream.JsonReader;
import org.testng.Assert;
import org.testng.annotations.*;
import pojo.Product;
import sql.QueryDDL;
import sql.QueryDML;
import sql.QuerySelect;

import java.io.FileReader;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TestDDL {
    private final QueryDDL queryDDL = new QueryDDL();
    private final QueryDML queryDML = new QueryDML();
    private final QuerySelect querySelect = new QuerySelect();

    @BeforeClass
    public void deleteDataBeforeTests() throws InterruptedException {
        queryDDL.deleteData();
        Thread.sleep(2000);
    }

    @DataProvider(name = "createTable")
    public Object[][] dataProviderCreateTable() {
        return new Object[][]{
                {"productone"},
                {"producttwo"}
        };
    }

    // Создайте 2 таблицы ниже. Столбец ‘code’ первичный ключ типа int (с автоувеличением), столбец ‘model’ типа int, столбец ‘price’ типа int, столбец ‘maker’ типа varchar(25)
    @Test(dataProvider = "createTable", priority = 10)
    public void test1(String table) throws SQLException {
        String[] columns = {"code int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY", "model int", "price int", "maker varchar(25)"};
        queryDDL.createTable(table, columns);
        Assert.assertEquals(querySelect.checkExistColumnOrTable("public", table, ""), true);
    }

    // Добавьте к таблице ProductOne столбец ‘city’ с типом varchar(25)
    @Test(priority = 11)
    public void test2() throws SQLException {
        queryDDL.addColumnInTable("productone", "city", "varchar(25)");
        Assert.assertEquals(querySelect.checkExistColumnOrTable("public", "productone", "city"), true);
    }

    // Удалите столбец ‘city’ из таблицы ProductOne
    @Test(priority = 12)
    public void test3() throws SQLException {
        queryDDL.deleteColumnInTable("productone", "city");
        Assert.assertEquals(querySelect.checkExistColumnOrTable("public", "productone", "city"), false);
    }

    // Удалите таблицу ProductTwo
    @Test(priority = 13)
    public void test4() throws SQLException {
        queryDDL.deleteTable("producttwo");
        Assert.assertEquals(querySelect.checkExistColumnOrTable("public", "producttwo", ""), false);
    }

    // Создайте повторно таблицу ProductTwo
    @Test(priority = 14)
    public void test5() throws SQLException {
        String[] columns = {"code int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY", "model int", "price int", "maker varchar(25)"};
        queryDDL.createTable("producttwo", columns);
        Assert.assertEquals(querySelect.checkExistColumnOrTable("public", "producttwo", ""), true);
    }

    @DataProvider(name = "addValuesIntoTable")
    public Object[][] dataProviderAddValuesIntoTable() {
        return new Object[][]{
                {"productone", "src/test/resources/json/task_3/productOneAllValues.json"},
                {"producttwo", "src/test/resources/json/task_3/productTwoAllValues.json"}
        };
    }

    // В соответствии с таблицами ProductOne и ProductTwo добавить записи в БД
    @Test(dataProvider = "addValuesIntoTable", priority = 15)
    public void test6(String table, String jsonPath) throws SQLException, IOException {
        JsonReader reader = new JsonReader(new FileReader(jsonPath));
        Gson gson = new Gson();
        Product products = gson.fromJson(reader, Product.class);

        String[] columns = {"model", "price", "maker"};
        StringBuilder values = new StringBuilder();
        for (int i = 0; i < products.getModel().size(); i++) {
            String[] row = {
                    products.getModel().get(i).toString(),
                    products.getPrice().get(i).toString(),
                    "'" + products.getMaker().get(i) + "'"};
            values.append("(").append(String.join(", ", row)).append("),");
        }
        values.deleteCharAt(values.length() - 1);
        queryDML.addValuesInTableFromJson(table, columns, values.toString());

        List<ArrayList<String>> listProducts = new ArrayList<>();
        ResultSet rs = querySelect.getAllRowsTable(table, columns);

        while (rs.next()) {
            int model = rs.getInt(1);
            int price = rs.getInt(2);
            String maker = rs.getString(3);
            ArrayList<String> rowTable = new ArrayList<>();
            rowTable.add(String.valueOf(model));
            rowTable.add(String.valueOf(price));
            rowTable.add(maker);
            listProducts.add(rowTable);
        }

        for (int i = 0; i < products.getModel().size(); i++) {
            Assert.assertEquals(Integer.parseInt(listProducts.get(i).get(0)), products.getModel().get(i));
            Assert.assertEquals(Integer.parseInt(listProducts.get(i).get(1)), products.getPrice().get(i));
            Assert.assertEquals(listProducts.get(i).get(2), products.getMaker().get(i));
        }
    }

    @AfterMethod
    public void closeSession() throws SQLException {
        queryDDL.closeSession();
        queryDML.closeSession();
        querySelect.closeSession();
    }
}
